---
import type { DefTree } from "◇content/types";
import Stack from "◇components/Stack.astro";
import { renderMarkup } from "◇lib";

interface Props {
  defs: DefTree;
}

let { defs }: Props = Astro.props;
---

<Stack as="ol" gap={1}>
  {
    defs.map((def) =>
      typeof def === "string" ? (
        <li set:html={renderMarkup(def)} />
      ) : (
        <li>
          <div class="nested-def">
            {def.labels ? (
              <div class="def-labelled">
                <aside class="def-labels">
                  {def.labels.map((label) => (
                    <span class="small-caps">{label}</span>
                  ))}
                </aside>
                <p set:html={renderMarkup(def.meaning)} />
              </div>
            ) : (
              <p class="def" set:html={renderMarkup(def.meaning)} />
            )}

            {(def.examples ?? []).map((example) => (
              <p class="example">
                <i lang="x-hs" set:html={renderMarkup(example.hs)} />
                <span class="arrow">→</span>
                <span set:html={renderMarkup(example.en)} />
              </p>
            ))}

            {def.children !== undefined && <Astro.self defs={def.children} />}
          </div>
        </li>
      ),
    )
  }
</Stack>

<style>
  ol {
    list-style-position: inside;

    &:has(:nth-child(10)) {
      padding-inline-start: 2.8ch;
      list-style-position: outside;
    }
  }

  .def-labelled {
    display: inline-flex;
    flex-wrap: wrap;
    flex-direction: row;
    align-items: center;
    gap: var(--s1);
  }

  .def-labels {
    display: inline-flex;
    flex-direction: row;
    align-items: center;
    gap: var(--s1);

    & > * {
      line-height: 2.25cap;
      font-size: var(--f1);
      font-weight: 450;
      background-color: var(--c-badge-teal-bg);
      color: var(--c-badge-teal-text);
      border-radius: 8px;
      padding-inline: var(--s1);
    }
  }

  .example {
    margin-inline-start: var(--s5);
  }

  .nested-def {
    display: inline-block;
  }

  .arrow {
    font-weight: 500;
    font-size: var(--f2);
    padding-inline: var(--s1);
  }
</style>
