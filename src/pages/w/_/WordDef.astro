---
import type { DefTree } from "◇content/types";
import Stack from "◇components/Stack.astro";

interface Props {
  defs: DefTree;
}

let { defs }: Props = Astro.props;
---

<Stack as="ol" gap={1}>
  {
    defs.map((def) =>
      typeof def === "string" ? (
        <li>{def}</li>
      ) : (
        <li>
          <div class="nested-def">
            <p>{def.meaning}</p>

            {(def.examples ?? []).map((example) => (
              <p class="example">
                <i lang="x-hs">{example.hs}</i>
                <span class="arrow">→</span>
                {example.en}
              </p>
            ))}

            {def.children !== undefined && <Astro.self defs={def.children} />}
          </div>
        </li>
      ),
    )
  }
</Stack>

<style>
  ol {
    list-style-position: inside;

    &:has(:nth-child(10)) {
      padding-inline-start: 2.8ch;
      list-style-position: outside;
    }
  }

  .example {
    margin-inline-start: var(--s5);
  }

  .nested-def {
    display: inline-block;
  }

  .arrow {
    font-weight: 500;
    font-size: var(--f2);
    padding-inline: var(--s1);
  }
</style>
