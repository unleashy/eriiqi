---
import type {
  InferGetStaticParamsType,
  InferGetStaticPropsType,
  GetStaticPaths,
} from "astro";
import { getCollection } from "astro:content";
import { capitalise, intersperse, renderMarkup, toIpa } from "◇lib";
import Layout from "◇layouts/Layout.astro";
import Stack from "◇components/Stack.astro";
import WordDef from "./_/WordDef.astro";
import "@fontsource/charis-sil";

export const getStaticPaths = (async () => {
  const words = await getCollection("words");
  return words.map((word) => ({
    params: { word: word.id },
    props: { parts: word.data.parts, ipa: word.data.ipa },
  }));
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

let { word }: Params = Astro.params;
let { parts, ipa }: Props = Astro.props;
---

<Layout title={`${word} — Eriiqì: a Hsizu dictionary`} mainGap={7}>
  <Fragment slot="header">
    <b>
      <a href="/">
        <span class="arrow">←</span> back
      </a>
    </b>
    <h1>{word}</h1>
    <aside>
      pronounced <span class="ipa" lang="und-fonipa"
        >/{ipa ?? toIpa(word)}/</span
      >
    </aside>
  </Fragment>

  {
    Object.entries(parts).map(([part, detail]) => (
      <Stack as="article" gap={2}>
        <h2>{capitalise(part)}</h2>

        <Stack gap={5} class="indented">
          <WordDef defs={detail.defs} />

          {detail.etym !== undefined && (
            <Stack gap={2}>
              <h3 class="small-caps">Etymology</h3>
              <p set:html={renderMarkup(detail.etym)} />
            </Stack>
          )}

          {detail.notes !== undefined && (
            <Stack gap={2}>
              <h3 class="small-caps">Notes</h3>
              <p set:html={renderMarkup(detail.notes)} />
            </Stack>
          )}

          {detail.rel !== undefined && (
            <Stack gap={2}>
              <h3 class="small-caps">See also</h3>
              <p>
                {intersperse(
                  detail.rel.map((rel) => (
                    <a href={`/w/${rel.id}`}>{rel.id}</a>
                  )),
                  <>,</>,
                )}
              </p>
            </Stack>
          )}
        </Stack>
      </Stack>
    ))
  }
</Layout>

<style>
  h2 {
    font-size: var(--f3);
    font-weight: 600;
  }

  .arrow {
    font-weight: 500;
  }

  aside {
    font-size: var(--f2);
    color: var(--c-grey-a12);
  }

  .ipa {
    font-family: "Charis SIL", var(--font-stack);
    font-variant-ligatures: no-common-ligatures;
  }

  h3 {
    font-size: inherit;
    font-weight: 600;
  }

  .indented {
    margin-inline-start: var(--s1);
    padding-inline-start: var(--s3);
    padding-block-end: var(--s1);
    border-inline-start: 1px dashed var(--c-separator);
  }
</style>
