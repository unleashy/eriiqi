---
import type {
  InferGetStaticParamsType,
  InferGetStaticPropsType,
  GetStaticPaths,
} from "astro";
import { getCollection } from "astro:content";
import Layout from "◇layouts/Layout.astro";
import Stack from "◇components/Stack.astro";
import IconArrowLeft from "◇components/IconArrowLeft.astro";
import { capitalise, intersperse, pronounce } from "◇lib";
import type { DefTree } from "◇content/types";
import "@fontsource/charis-sil";

export const getStaticPaths = (async () => {
  const words = await getCollection("words");
  return words.map((word) => ({
    params: { word: word.id },
    props: { data: word.data },
  }));
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

let { word }: Params = Astro.params;
let { data }: Props = Astro.props;
---

<Layout title={`${word} — Eriiqì: a Hsizu dictionary`} mainGap={7}>
  <Fragment slot="header">
    <div>
      <a href="/" class="back-link">
        <IconArrowLeft />
        back
      </a>
    </div>
    <h1>{word}</h1>
    <p class="ipa">/{pronounce(word)}/</p>
  </Fragment>

  {
    Object.entries(data).map(([part, detail]) => (
      <Stack as="article" gap={2}>
        <h2>{capitalise(part)}</h2>

        <Stack gap={5} class="indented">
          {(function renderDefs(defs: DefTree) {
            return (
              <Stack as="ol" gap={2}>
                {defs.map((def) => {
                  if (typeof def === "string") return;
                  <li>{def}</li>;

                  return (
                    <li>
                      <div style="display: inline-block">
                        <p>{def.meaning}</p>

                        {(def.examples ?? []).map((example) => (
                          <p class="example">{example}</p>
                        ))}

                        {def.children !== undefined && renderDefs(def.children)}
                      </div>
                    </li>
                  );
                })}
              </Stack>
            );
          })(detail.defs)}

          {detail.etym !== undefined && (
            <Stack gap={2}>
              <h3>Etymology</h3>
              <p>{detail.etym}</p>
            </Stack>
          )}

          {detail.rel !== undefined && (
            <Stack gap={2}>
              <h3>See also</h3>
              <p>
                {intersperse(
                  detail.rel.map((rel) => (
                    <a href={`/w/${rel.id}`}>{rel.id}</a>
                  )),
                  <>,</>,
                )}
              </p>
            </Stack>
          )}
        </Stack>
      </Stack>
    ))
  }
</Layout>

<style>
  h2 {
    font-size: var(--f3);
    font-weight: 600;
  }

  h3 {
    font-size: inherit;
    font-weight: 600;
    font-variant: small-caps;
    text-transform: lowercase;
    letter-spacing: 0.033ch;
  }

  ol {
    padding: 0;
    list-style-position: inside;

    &:has(:nth-child(10)) {
      padding-inline-start: 2.8ch;
      list-style-position: outside;
    }
  }

  li {
    & > * {
      vertical-align: text-top;
    }

    & ol {
      padding-inline-start: var(--s4);
    }

    &::marker {
      font-size: var(--f2);
      margin-inline-end: var(--s2);
    }
  }

  .indented {
    margin-inline-start: var(--s1);
    padding-inline-start: var(--s3);
    padding-block-end: var(--s1);
    border-inline-start: 1px dashed var(--c-grey-a6);
  }

  .ipa {
    font-family: "Charis SIL", var(--font-stack);
  }

  .back-link {
    font-weight: 650;

    &:hover {
      text-decoration: none;
    }
  }

  .example {
    margin-inline-start: var(--s5);
  }
</style>
